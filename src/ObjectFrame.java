
import java.io.*;
import java.util.*;
import java.awt.*;
import java.lang.*;
import java.util.Vector;
import java.util.Enumeration;
/**
 *
 * @author Erhan Oztop, 2001-2002 <br>
 * <br>
 * Source code by Erhan Oztop (erhan@atr.co.jp) <br>
 * Copyright August 2002 via <br>
 * University of Southern California Ph.D. publication copyright <br>
 */

class ObjectFrame extends Frame
{
    Object3d obj;
    Panel mainpan;
    Panel bot,realbot;
    double[][] cfg;
    TextField filename,dgfile;
    Scrollbar timeline;
    Label timelabel;
    static final int MAXMAPPING=30;
    public double timeScale=1.0/10000;
    static final int timeQ=10000;
    double realt=0;

    ObjectConf[] timeIndex=new ObjectConf[timeQ+1];
    Segment[] mysegs=new Segment[MAXMAPPING];
    int[] mydata=new int[MAXMAPPING];
    int mapc=0;
    Vector confSeries=new Vector();
    int timemap;  //column for time stamps in the file
    int Wposx=1,Wposy=1,Wposz=1;
    //TextField speedtxt;
    static String TMP_FILE="/tmp/HV-ObjectFrame-pipe.ges";
    Gesture testgest;

    public ObjectFrame(Object3d o)
    {
        Label sep;
        obj=o;
        setLayout(new BorderLayout());
        bot=new Panel();
        bot.setLayout(new GridLayout(0,4));
        realbot=new Panel();
        realbot.setLayout(new GridLayout(0,3));
        realbot.setBackground(Color.orange);
        realbot.setForeground(Color.black);
        Button lastb;
        bot.add(lastb=new Button("CLOSE"));
        //lastb.setBackground(Color.white); lastb.setForeground(Color.blue);
        bot.add(lastb=new Button("LOAD"));
        //lastb.setBackground(Color.white); lastb.setForeground(Color.red);
        bot.add(lastb=new Button("SAVE"));
        //lastb.setBackground(Color.white); lastb.setForeground(Color.red);
        bot.add(lastb=new Button("FIXSTART"));
        //lastb.setBackground(Color.white); lastb.setForeground(Color.blue);
        //bot.add(new Label("Speed:",Label.RIGHT));
        //bot.add(speedtxt=new TextField("5"));
        bot.add(new Label("Gesture file:",Label.RIGHT));
        bot.add(filename=new TextField("/tmp/test.ges",20));
        lastb.setBackground(Color.white); lastb.setForeground(Color.blue);
        bot.add(lastb=new Button("LINDRIVE"));
        bot.add(lastb=new Button("REACH"));
        lastb.setBackground(Color.orange);
        bot.add(lastb=new Button("VISREACH"));
        bot.add(lastb=new Button("CLEARTRAJ"));

        realbot.add(lastb=new Button("LOAD DATA from:"));
        realbot.add(dgfile=new TextField("mixed1.dg",20));


        mainpan=new Panel();
        mainpan.setBackground(Color.white);
        mainpan.setLayout(new GridLayout(26,2));
        placePanel(obj.root);
        //mainpan.add("Center",sep=new Label("*** End of Joints ***",Label.CENTER));
        //sep.setBackground(Color.yellow);


        timeline=new Scrollbar(Scrollbar.HORIZONTAL, 0, 1, 0, timeQ);
        Panel timepanel=new Panel();
        timepanel.setLayout(new GridLayout(1,1));
        mainpan.add(timelabel=new Label("time: 0"));
        timelabel.setBackground(Color.orange);

        timepanel.setBackground(Color.orange);
        timepanel.add(timeline);
        mainpan.add("Center",timepanel);

        add("Center",mainpan);
        //bot.setBackground(Color.white);
        add("North",bot);
        add("South",realbot);



        cfg=new double[2][obj.segc];
        pullConfig(cfg[0]);
        pullConfig(cfg[1]);
    }

    private void pullConfig(double[] c)
    {
        for (int i=0;i<obj.segc;i++)
        {
            c[i]=obj.seg[i].beta;
        }
    }

    private void writeConfig(String fn)
    {
        try {
            DataOutputStream patout = Elib.openfileWRITE(fn);
            patout.writeBytes("# This hand gesture file is generated by HV system (ObjectFrame module) (Erhan Oztop -Feb'00)\n\n");


            patout.writeBytes("Gesture "+fn+"     -at least the file dimensionName is this\n");
            patout.writeBytes("Speed "+HV.speedtxt.getText()+"     -at least the file dimensionName is this\n\n\n");
            for (int i=0;i<obj.segc;i++)
            {Segment s=obj.seg[i];
                if (s.minbeta==s.maxbeta) continue;
                if (s.joint_axis==null) continue;
                patout.writeBytes(s.label+"    "
                        +Elib.snice(180*cfg[0][i]/Math.PI,1e3,6)+"  "+
                        Elib.snice(180*cfg[1][i]/Math.PI,1e3,6)+"\n");
            }
            patout.close();
        } catch (IOException e)
        { System.err.println("closePattern : EXCEPTION "+e);
        }
        System.out.println("Wrote gesture file in "+fn);
    }



    private void placePanel(Segment s)
    {
        if (s.minbeta!=s.maxbeta) // if not moveable don't show
        {
            Panel p=s.makePanel("");
            if (p!=null) mainpan.add(p);
        }
        for (int i=0;i<s.noch;i++)
            placePanel(s.child[i]);
    }

    public void closeSelf()
    {
        unplacePanel(obj.root);
        this.dispose();
    }

    private void unplacePanel(Segment s)
    {
        s.unmakePanel();
        for (int i=0;i<s.noch;i++)
            unplacePanel(s.child[i]);
    }

    int oldint_t=0;
    public void updateTime() {
        int int_t=timeline.getValue();
        realt=int_t*timeScale;
        timelabel.setText("time: "+realt);
        ObjectConf oc=timeIndex[int_t];
        //System.out.println("Obj.Conf info :"+oc.info);
        // ((Hand)obj).arm.resetJoints(); 
        // ((Hand)obj).arm.moveto(oc.pos);
        (obj).root.resetJoints();
        (obj).root.movetoy(oc.pos);
        for (int i=1;i<oc.datac;i++) {
            double newang=-oc.data[i]; // this angle
            //if (i<3) newang=-newang;
            Segment seg=mysegs[i]; // belogs to this segment
            seg.rotateJoint(newang-seg.beta);
        }
        //if (Math.abs(oldint_t-int_t)>15)
        HV.cv.refreshDisplay();
    }
    //ERHAN: Run HV with j HV erhdg.seg
    // newang=-newang stuff to be checked with the data also the index
    // i=1 normally is i=0. Try to find the wrist rotations meaning with that
    public boolean handleEvent(Event evt)
    { if (evt.id == Event.WINDOW_DESTROY) closeSelf();
    else if (evt.id == Event.SCROLL_ABSOLUTE ||
            evt.id == Event.SCROLL_LINE_DOWN ||
            evt.id == Event.SCROLL_LINE_UP ||
            evt.id == Event.SCROLL_PAGE_DOWN ||
            evt.id == Event.SCROLL_PAGE_UP
            )
    {
        Segment seg=whichSegment(evt.target);
        if (seg==null) {
            if (true) {
                updateTime();
                return  super.handleEvent(evt);
            }
            else return super.handleEvent(evt);
        }
        double newbeta=seg.beta_sb.getValue()*Math.PI/1800;
        obj.constrainedRotate(seg,newbeta-seg.beta);
        HV.cv.refreshDisplay();
        // LETS calculate the forces
        //    MotorPlan mp=HV.mcirc.fixedMotorPlan(((Hand)obj),HV.self.getCurrentObject());
        // ((Hand)obj).contact(HV.self.getCurrentObject());


    }
        return super.handleEvent(evt);
    }
    Segment whichSegment(Object t)
    {
        for (int i=0;i<obj.root.segc;i++)
        {
            if (obj.root.seg[i].seg_pan!=null)
                if (obj.root.seg[i].beta_sb==t)
                    return obj.root.seg[i];
        }
        return null;
    }


    public void loadKin(String fn) {
        mapc=0;
        boolean positiongot=false;
        int datano=0;  // # of data lines encountered
        int linec=0;
        int progressmod=100;
        timemap=1;  //default column for time stamps in the file
        int lasttick=0;
        int newtick;
        double maxtime=0;
        boolean datastarted=false;
        String s;
        timelabel.setText("Loading...");
        try {
            DataInputStream in = Elib.openURLfile(HV.baseURL,fn);
            if (in==null) return;
            linec=0;
            while (null!=(s=in.readLine())) {
                linec++;
                if (datano%progressmod==1)
                { timeline.setValue(linec%timeQ);
                    timelabel.setText("Loaded "+datano+
                            " samplings so far..."); }
                if (s.equals("")) continue;
                if (s.charAt(0) == '#') continue;
                if (datastarted) {
                    double[] vals=Elib.str2array(s," ");
                    double[] pack=new double[mapc];
                    double timestamp=vals[timemap-1];
                    for (int i=0;i<mapc;i++)
                        pack[i]=vals[mydata[i]-1];
                    ObjectConf oc=null;
                    if (positiongot) oc=new ObjectConf(pack,timestamp,
                            new Point3d(20*vals[Wposx-1],20*vals[Wposy-1],-20*vals[Wposz-1]));
                    else oc=new ObjectConf(pack,timestamp, new Point3d(0,0,0));
                    oc.setInfo("data no:"+(datano++));
                    if (timestamp>maxtime) maxtime=timestamp;
                    confSeries.addElement(oc);
                    continue;
                }
                StringTokenizer st= new StringTokenizer(s," ");
                if (st.hasMoreTokens()) {
                    String u=st.nextToken();
                    if (u.equals("position") || u.equals("POSITION")) {
                        Wposx=Elib.toInt(st.nextToken());
                        Wposy=Elib.toInt(st.nextToken());
                        Wposz=Elib.toInt(st.nextToken());
                        positiongot=true;
                        System.out.println("POSGOT:"+Wposx+","+Wposy+","+Wposz);
                        continue;
                    } else
                    if (u.equals("time") || u.equals("TIME")) {
                        timemap=Elib.toInt(st.nextToken());
                        continue;
                    } else
                    if (u.equals("data") || u.equals("DATA")) {
                        datastarted=true;
                        continue;
                    } else
                    if (u.equals("map") || u.equals("MAP")) {
                        String segname=st.nextToken();
                        int mappedto=Elib.toInt(st.nextToken());

                        int segix=obj.findSegment(segname);
                        if (segix==-1) mysegs[mapc]=null;
                        else mysegs[mapc]=obj.seg[segix];
                        if (mysegs[mapc]==null)
                            System.err.println("WARNING: file "+fn+
                                    " line:"+linec+
                                    " Segment dimensionName "+segname+
                                    " can not be resolved.");
                        mydata[mapc++]=mappedto;
                        continue;
                    }

                    System.err.println("WARNING:file "+fn+
                            " line:"+linec+
                            " expecting keyword DATA..."+
                            " Assuming that it is given here.");
                    datastarted=true;
                }


            }
        } catch (IOException e)
        { System.err.println("loadKin("+fn+
                ") error in processing the file. EXCEPTION "+e);
        }
        // Now let's setup the time scroll bars indexing into the configs.
        timeScale=maxtime/timeQ;
        Enumeration f=confSeries.elements();
        lasttick=-1;
        while ( f.hasMoreElements()) {
            ObjectConf oc=(ObjectConf)f.nextElement();
            double ts=oc.timestamp;
            newtick=(int)(0.5+ts/timeScale);
            for (int i=lasttick+1;i<=newtick;i++){
                timeIndex[i]=oc;
            }
            lasttick=newtick;
        }
        ((Hand)obj).resetJoints();
        timeline.setValue(0);
        updateTime();
    }

    // Now the file is finished.
    public boolean action(Event evt, Object arg)
    {int hit;

        if (arg.equals("FIXSTART"))
        {
            pullConfig(cfg[0]);
        }
        else
        if (arg.equals("SAVE"))
        {
            pullConfig(cfg[1]);
            writeConfig(filename.getText());
        }

        else if (arg.equals("CLOSE"))
        {
            closeSelf();
        }
        else if (arg.equals("LOAD DATA from:")) {
            String fname=dgfile.getText();
            System.out.println("Loading "+fname);
            loadKin(fname);
        }
        else if (arg.equals("LINDRIVE"))
        {
            doLinearDrive();
        }
        else if (arg.equals("REACH"))
        {
            HV.self.toggleReach("reaching");
        }
        else if (arg.equals("VISREACH"))
        {
            HV.self.toggleReach("visual");
        }
        else if (arg.equals("CLEARTRAJ"))
        {
            obj.clearTrajectory();
        }



        else return super.action(evt,arg);
        return true;
    }

    public void doLinearDrive()
    {
        pullConfig(cfg[1]);
        writeConfig(TMP_FILE);
        toggleGesture(TMP_FILE);
    }

    synchronized public void stopGesture()
    {
        testgest.stopGest();
        testgest=null;
    }

    synchronized private boolean toggleGesture(String s)
    {
        if (testgest==null)
        {
            testgest=obj.doGesture(s);
            testgest.start();
        } else
        { testgest.stopGest();
            testgest=null;
        }
        if (testgest==null) return false;
        return true;
    }

}

class ObjectConf {

    public double[] data=null;
    int datac=0;
    double timestamp=0;
    String info=null;
    Point3d pos=null;

    ObjectConf(double[] nums,int size,double ts,Point3d p) {
        pos=p;
        data=new double[size];
        for (int i=0;i<size;i++) data[i]=nums[i];
        datac=size;
        timestamp=ts;
    }
    ObjectConf(double[] nums,double ts) {
        this(nums,nums.length,ts,new Point3d(0,0,0));
    }
    ObjectConf(double[] nums,double ts, Point3d p) {
        this(nums,nums.length,ts,p);
    }

    public void setInfo(String s) {
        info=s;
    }

}
/*
 *
 * Erhan Oztop, 2000-2002  <br>
 * Source code by Erhan Oztop (erhan@atr.co.jp) <br>
 * Copyright August 2002 under <br>
 * University of Southern California Ph.D. publication copyright <br>
 */
 
